package jship;

import game.Pre;
import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.*;
import users.CurrentUser;


/**
 * Main form that runs when the program is started
 *
 * @author blackk100
 */
public final class JShip extends JFrame {

	/**
	 * Creates new form JShip
	 */
	public JShip() {
		this.initComponents();
		UserTF.setText(CurrentUser.getCurrentUser());
		this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    Help1P = new JPanel();
    Help1L = new JLabel();
    Help2P = new JPanel();
    Help2L = new JLabel();
    Help3P = new JPanel();
    Help3L = new JLabel();
    HomeP = new JPanel();
    TitleP = new JPanel();
    TitleL = new JLabel();
    UserL = new JLabel();
    UserTF = new JTextField();
    ButtonP = new JPanel();
    UserB = new JButton();
    Spacer1L = new JLabel();
    StatsB = new JButton();
    Spacer2L = new JLabel();
    PlayB = new JButton();
    Spacer3L = new JLabel();
    HelpB = new JButton();
    Spacer4L = new JLabel();
    ExitB = new JButton();

    Help1L.setText("<html>\nThe User Management section allows you to register a new account, login into an existing account, change the password of the currently logged in account, and delete the currently logged in account.<br/><br/>\nThe View Stats sections allows you to view and reset their game statistics.<br/>\nThe statistics are tracked on a combination of Game Mode and AI Difficulty basis (i.e., each AI Difficulty on each Game Mode has a separate set of statistics).<br/><br/>\nPlay loads the game setup screen where the following options can be set:<br/>\n1. <b>Grid Size</b> - Default is 10 x 10; a 15 x 15 grid can also be selected.<br/>\n2. <b>Game Mode</b> - 2 Game modes are available:<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;(i) <b>Classic</b> - Allows the players to shoot one shot in each round.<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;(ii) <b>Salvo</b> - The number of shot a player gets is equal to the number of ships that haven't been sunk that they still have.<br/>\n3. <b>Ships Available</b> - There are 4 different ships available and they vary in size and number.<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;(i) <b>Battleship</b> - Lenght = 5 tiles; Count = 1.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(ii) <b>Cruisers</b> - Lenght = 4 tiles; Count = 2.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(iii) <b>Destroyers</b> - Lenght = 3 tiles; Count = 3.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(iv) <b>Corvettes</b> - Lenght = 2 tiles; Count = 4.\n</html>");

    GroupLayout Help1PLayout = new GroupLayout(Help1P);
    Help1P.setLayout(Help1PLayout);
    Help1PLayout.setHorizontalGroup(Help1PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help1PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help1L, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        .addContainerGap())
    );
    Help1PLayout.setVerticalGroup(Help1PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help1PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help1L, GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        .addContainerGap())
    );

    Help2L.setText("<html>\nEach Player is assigned a Grid located on the left and right sides of the game screen.<br/><br/>\nBetween the Grids, there is are a number of components that describe the match settings selected by the user.<br/>\nAmongst these, a Text Area is present which logs events happening throughout the match such as ship placement and also prompts if the user is doing something that is not allowed.<br/><br/>\nBelow the Text Area are 4 buttons:<br/>\n1. <b>Start/Next Round/End Button</b> - This button can firstly, be used to Start the match after placing ships; Secondly, to enter the Next Round; and finally, to End the match after either player wins.<br/>\n2. <b>Clear Alerts Button</b> - Clears the log in the alerts Text Area.<br/>\n3. <b>Help Button</b> - Shows this in-game help text.<br/>\n4. <b>Exit Button</b> - Quits the match and returns the user to main screen.<br/>\n</html>");

    GroupLayout Help2PLayout = new GroupLayout(Help2P);
    Help2P.setLayout(Help2PLayout);
    Help2PLayout.setHorizontalGroup(Help2PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help2PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help2L, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        .addContainerGap())
    );
    Help2PLayout.setVerticalGroup(Help2PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help2PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help2L, GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        .addContainerGap())
    );

    Help3L.setText("<html>\nThe ships can placed on the grid by clicking on a tile.<br/>\nBy default the ships are placed horizontally towards the right from the selected tile.<br/>\nTo place the ships vertically downwards, then press the Shift/Control button on your keyboard while clicking on the tile you wish to start from.<br/><br/>\nThe textarea will keep adding alerts for indicating which ship is to be currently placed.<br/>\nA placed ship or a shot can be removed by clicking on any of it's tiles.<br/>\nSee the rules below for the restrictions on ship placement.<br/><br/>\nThe colour of the grid's button indicate the following:<br/>\n<b>Sky/Light Blue</b> - Empty water<br/>\n<b>Yellow</b> - Selected tile/tiles<br/>\n<b>Light Grey</b> - Ship border(only shown in placement round)<br/>\n<b>Dark Grey</b> - Placed ships (only shown after the placement round)<br/>\n<b>Dark Blue</b> - A missed shot<br/>\n<b>Red</b> - Shot that hit a ship<br/><br/>\nRules:<br>\n1. No two ships can be adjacent to each other (i.e., they cannot \"touch\"), but they can touch diagonally (the area where ships cannot be present is indicated around selected location for ship placement in Light Grey).<br>\n2. The match ends when all of the ships of either one of the players are sunk.<br>\n</html>");

    GroupLayout Help3PLayout = new GroupLayout(Help3P);
    Help3P.setLayout(Help3PLayout);
    Help3PLayout.setHorizontalGroup(Help3PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help3PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help3L, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        .addContainerGap())
    );
    Help3PLayout.setVerticalGroup(Help3PLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(Help3PLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(Help3L, GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        .addContainerGap())
    );

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setTitle("JShip");
    setResizable(false);

    TitleL.setHorizontalAlignment(SwingConstants.CENTER);
    TitleL.setText("JShip");

    UserL.setLabelFor(UserTF);
    UserL.setText("Current User:");

    UserTF.setEditable(false);

    GroupLayout TitlePLayout = new GroupLayout(TitleP);
    TitleP.setLayout(TitlePLayout);
    TitlePLayout.setHorizontalGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(TitlePLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(TitleL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(TitlePLayout.createSequentialGroup()
            .addComponent(UserL)
            .addGap(18, 18, 18)
            .addComponent(UserTF)))
        .addContainerGap())
    );
    TitlePLayout.setVerticalGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(TitlePLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(TitleL)
        .addGap(18, 18, 18)
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(UserL)
          .addComponent(UserTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    ButtonP.setLayout(new GridLayout(3, 3, 10, 10));

    UserB.setText("User Management");
    UserB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ChangeUser(evt);
      }
    });
    ButtonP.add(UserB);
    ButtonP.add(Spacer1L);

    StatsB.setText("Statistics");
    StatsB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ShowStats(evt);
      }
    });
    ButtonP.add(StatsB);
    ButtonP.add(Spacer2L);

    PlayB.setText("Play");
    PlayB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Play(evt);
      }
    });
    ButtonP.add(PlayB);
    ButtonP.add(Spacer3L);

    HelpB.setText("Help");
    HelpB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Help(evt);
      }
    });
    ButtonP.add(HelpB);
    ButtonP.add(Spacer4L);

    ExitB.setText("Exit");
    ExitB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Exit(evt);
      }
    });
    ButtonP.add(ExitB);

    GroupLayout HomePLayout = new GroupLayout(HomeP);
    HomeP.setLayout(HomePLayout);
    HomePLayout.setHorizontalGroup(HomePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, HomePLayout.createSequentialGroup()
        .addGroup(HomePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(ButtonP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
          .addComponent(TitleP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    HomePLayout.setVerticalGroup(HomePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(HomePLayout.createSequentialGroup()
        .addComponent(TitleP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(ButtonP, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(HomeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(HomeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Changes the current user.
	 *
	 * @param evt Button Click
	 */
	private void ChangeUser(ActionEvent evt) {//GEN-FIRST:event_ChangeUser
		ChangeUser ChangeUser = new ChangeUser(); // Creates the ChangeUser Form object
		ChangeUser.setVisible(true);              // Makes the ChangeUser Form to be visible

		this.dispose();                           // Destroys the current form object
	}//GEN-LAST:event_ChangeUser

	/**
	 * Shows the statistics for the current user.
	 *
	 * @param evt Button Click
	 */
	private void ShowStats(ActionEvent evt) {//GEN-FIRST:event_ShowStats
		ViewStats ViewStats = new ViewStats(); // Creates the ViewStats Form object
		ViewStats.setVisible(true);            // Makes the ViewStats Form to be visible

		this.dispose();                        // Destroys the current form object
	}//GEN-LAST:event_ShowStats

	/**
	 * Starts the game.
	 *
	 * @param evt Button Click
	 */
	private void Play(ActionEvent evt) {//GEN-FIRST:event_Play
		Pre Pre = new Pre();  // Creates the Pre Form object
		Pre.setVisible(true); // Makes the Pre Form to be visible

		this.dispose();       // Destroys the current form object
	}//GEN-LAST:event_Play

	/**
	 * Exits the program.
	 *
	 * @param evt Button Click
	 */
	private void Exit(ActionEvent evt) {//GEN-FIRST:event_Exit
		if (JOptionPane.showConfirmDialog(null, "Are you sure?", "Abandon Ship?", JOptionPane.YES_NO_OPTION) == 0) {
			System.exit(0);
		}
	}//GEN-LAST:event_Exit

	/**
	 * A series of <code>JOptionPane.MessageDialog</code>-s for explaining the game.
	 *
	 * @param evt Button Click
	 */
  private void Help(ActionEvent evt) {//GEN-FIRST:event_Help
		boolean[] responses = {false, false, false};

		one:
		while (true) {
			responses[0] = JOptionPane.showConfirmDialog(null, this.Help1P, "Help - 1", JOptionPane.YES_NO_OPTION) == 0;
			two:
			while (responses[0]) {   // One   -> Two
				responses[1] = JOptionPane.showConfirmDialog(null, this.Help2P, "Help - 2", JOptionPane.YES_NO_OPTION) == 0;
				three:
				while (responses[1]) { // Two   -> Three
					responses[2] = JOptionPane.showConfirmDialog(null, this.Help3P, "Help - 3", JOptionPane.YES_NO_OPTION) == 0;
					if (responses[2]) {  // Three -> Game
						return;
					} else {             // Three -> Two
						continue two;
					}
				}
				continue one;          // Two   -> One
			}
			return;                  // One   -> Game
		}
  }//GEN-LAST:event_Help

	/**
	 * Sets the Nimbus look and feel.
	 * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see:
	 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	 *
	 * Creates and displays the form.
	 *
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
			java.util.logging.Logger.getLogger(JShip.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
			System.out.println("ERROR: " + e);
		}

		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new JShip().setVisible(true);
			}
		});
	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JPanel ButtonP;
  private JButton ExitB;
  private JLabel Help1L;
  private JPanel Help1P;
  private JLabel Help2L;
  private JPanel Help2P;
  private JLabel Help3L;
  private JPanel Help3P;
  private JButton HelpB;
  private JPanel HomeP;
  private JButton PlayB;
  private JLabel Spacer1L;
  private JLabel Spacer2L;
  private JLabel Spacer3L;
  private JLabel Spacer4L;
  private JButton StatsB;
  private JLabel TitleL;
  private JPanel TitleP;
  private JButton UserB;
  private JLabel UserL;
  private JTextField UserTF;
  // End of variables declaration//GEN-END:variables
}
