package jship;

import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.*;
import users.CreateUser;
import users.CurrentUser;
import users.LoginUser;


/**
 * Form for registering users, logging in, and logging out.
 *
 * @author blackk100
 */
public class ChangeUser extends JFrame {

	/**
	 * Creates new form Login
	 */
	public ChangeUser() {
		this.initComponents();
		this.updateCurrentUser();
		this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    InputP = new JPanel();
    TitleL = new JLabel();
    CurrentUserL = new JLabel();
    CurrentUserTF = new JTextField();
    UserL = new JLabel();
    UserTF = new JTextField();
    PassL = new JLabel();
    PassTF = new JPasswordField();
    ButtonsP = new JPanel();
    LoginB = new JButton();
    Spacer1L = new JLabel();
    LogoutB = new JButton();
    RegisterB = new JButton();
    Spacer2L = new JLabel();
    CancelB = new JButton();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setTitle("User Management");
    setResizable(false);

    TitleL.setHorizontalAlignment(SwingConstants.CENTER);
    TitleL.setText("User Management");

    CurrentUserL.setLabelFor(CurrentUserTF);
    CurrentUserL.setText("Current User:");

    CurrentUserTF.setEditable(false);

    UserL.setLabelFor(UserTF);
    UserL.setText("Username:");

    PassL.setLabelFor(PassTF);
    PassL.setText("Password:");

    GroupLayout InputPLayout = new GroupLayout(InputP);
    InputP.setLayout(InputPLayout);
    InputPLayout.setHorizontalGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(InputPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(TitleL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(InputPLayout.createSequentialGroup()
            .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
              .addComponent(CurrentUserL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(UserL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(PassL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addComponent(PassTF)
              .addComponent(UserTF)
              .addComponent(CurrentUserTF))))
        .addContainerGap())
    );
    InputPLayout.setVerticalGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(InputPLayout.createSequentialGroup()
        .addGap(18, 18, 18)
        .addComponent(TitleL)
        .addGap(18, 18, 18)
        .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(CurrentUserL)
          .addComponent(CurrentUserTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(UserL)
          .addComponent(UserTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(InputPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(PassL)
          .addComponent(PassTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    ButtonsP.setLayout(new GridLayout(2, 3, 30, 10));

    LoginB.setText("Login");
    LoginB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Login(evt);
      }
    });
    ButtonsP.add(LoginB);
    ButtonsP.add(Spacer1L);

    LogoutB.setText("Logout");
    LogoutB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Logout(evt);
      }
    });
    ButtonsP.add(LogoutB);

    RegisterB.setText("Register");
    RegisterB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Register(evt);
      }
    });
    ButtonsP.add(RegisterB);
    ButtonsP.add(Spacer2L);

    CancelB.setText("Cancel");
    CancelB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        GoBack(evt);
      }
    });
    ButtonsP.add(CancelB);

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(ButtonsP, GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
          .addComponent(InputP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(InputP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(ButtonsP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Updates the current user. Called after every button.
	 */
	private void updateCurrentUser() {
		CurrentUserTF.setText(users.CurrentUser.GetCurrentUser());
	}

	/**
	 * Logs the user into the program.
	 *
	 * @param evt Button Click
	 */
	private void Login(ActionEvent evt) {//GEN-FIRST:event_Login
		if (UserTF.getText().isEmpty()) {              // Checks if a username is entered
			System.out.println("Please enter a Username!");
			JOptionPane.showMessageDialog(null, "Please enter a Username!");
		} else if (PassTF.getPassword().length == 0) { // Checks if a password is entered
			System.out.println("Please enter a Password!");
			JOptionPane.showMessageDialog(null, "Please enter a Password!");
		} else {                                       // A Username and a Password has been entered
			LoginUser lu = new LoginUser(UserTF.getText(), PassTF.getPassword()); // Created the LoginUser object
			int res = lu.login(); // User logged in. res holds the return value.

			this.updateCurrentUser();
			if (res == -3) {                     // Unknown Exception
				System.out.println("Fatal Error Occured! Contact Developer!");
				JOptionPane.showMessageDialog(null, "Fatal Error Occured! Contact Developer!");
			} else if (res == -2 || res == -1) { // SQL Exception; Class Not Found Exception
				System.out.println("Error Occured! Contact Developer!");
				JOptionPane.showMessageDialog(null, "Error Occured! Contact Developer!");
			} else if (res == 0) {               // ChangeUser Failed
				System.out.println("We could not find a matching user! Please register first!");
				JOptionPane.showMessageDialog(null, "We could not find a matching user! Please register first!");
			} else if (res == 1) {               // ChangeUser Successful
				System.out.println("Logged in!");
				JOptionPane.showMessageDialog(null, "Logged in!");
				this.CancelB.doClick();
			} else {                             // Unknown Return Value
				System.out.println("Unknown Return Value! Contact Developer");
				JOptionPane.showMessageDialog(null, "Unknown Return Value! Contact Developer!");
			}
		}
	}//GEN-LAST:event_Login

	/**
	 * Logs the current user out.
	 *
	 * @param evt Button Click
	 */
	private void Logout(ActionEvent evt) {//GEN-FIRST:event_Logout
		if (CurrentUser.GetCurrentUser().equals("guest")) { // No User is logged in
			System.out.println("No User is logged in!");
			JOptionPane.showMessageDialog(null, "No User is logged in!");
		} else {                                            // A User is logged in. Logging out.
			users.CurrentUser.Logout();
			this.updateCurrentUser();
			System.out.println("User logged out!");
			JOptionPane.showMessageDialog(null, "User logged out!");
			this.CancelB.doClick();
		}
	}//GEN-LAST:event_Logout

	/**
	 * Registers the user.
	 *
	 * @param evt Button Click
	 */
	private void Register(ActionEvent evt) {//GEN-FIRST:event_Register
		if (UserTF.getText().isEmpty()) {               // Checks if a username is entered
			System.out.println("Please enter a Username!");
			JOptionPane.showMessageDialog(null, "Please enter a Username!");
		} else if (PassTF.getPassword().length == 0) { // Checks if a password is entered
			System.out.println("Please enter a Password!");
			JOptionPane.showMessageDialog(null, "Please enter a Password!");
		} else {                                       // A Username and a Password has been entered
			CreateUser cu = new CreateUser(UserTF.getText(), PassTF.getPassword()); // Created the CreateUser object
			int res = cu.create(); // User created. res holds the return value.

			this.updateCurrentUser();
			if (res == -4) {                     // User Already Registered Exception
				System.out.println("This Username is not available!");
				JOptionPane.showMessageDialog(null, "This Username is not available!");
			} else if (res == -3) {              // Unknown Exception
				System.out.println("Fatal Error Occured! Contact Developer!");
				JOptionPane.showMessageDialog(null, "Fatal Error Occured! Contact Developer!");
			} else if (res == -2 || res == -1) { // SQL Exception; Class Not Found Exception
				System.out.println("Error Occured! Contact Developer!");
				JOptionPane.showMessageDialog(null, "Error Occured! Contact Developer!");
			} else if (res == 0) {               // ChangeUser Failed
				System.out.println("We could not find a matching user! Please register first!");
				JOptionPane.showMessageDialog(null, "We could not find a matching user! Please register first!");
			} else if (res == 1) {               // ChangeUser Successful
				System.out.println("Registered! Please login in!");
				JOptionPane.showMessageDialog(null, "Registered! Please login in!");
			} else {                             // Unknown Return Value
				System.out.println("Unknown Return Value! Contact Developer");
				JOptionPane.showMessageDialog(null, "Unknown Return Value! Contact Developer!");
			}
		}
	}//GEN-LAST:event_Register

	/**
	 * Goes back to the main frame.
	 *
	 * @param evt Button Click
	 */
	private void GoBack(ActionEvent evt) {//GEN-FIRST:event_GoBack
		JShip JShip = new JShip(); // Creates the JShip Form object
		JShip.setVisible(true);    // Makes the JShip Form to be visible

		this.dispose();            // Destroys the current form object
	}//GEN-LAST:event_GoBack

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JPanel ButtonsP;
  private JButton CancelB;
  private JLabel CurrentUserL;
  private JTextField CurrentUserTF;
  private JPanel InputP;
  private JButton LoginB;
  private JButton LogoutB;
  private JLabel PassL;
  private JPasswordField PassTF;
  private JButton RegisterB;
  private JLabel Spacer1L;
  private JLabel Spacer2L;
  private JLabel TitleL;
  private JLabel UserL;
  private JTextField UserTF;
  // End of variables declaration//GEN-END:variables
}
