package jship;

import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.*;
import stats.*;
import users.ChangeUserDetails;
import users.CurrentUser;


/**
 * Form for viewing and resetting the statistics of the current user.
 *
 * @author blackk100
 */
final class ViewStats extends JFrame {

	/**
	 * Game Mode:
	 * <pre>
	 * C - Classic
	 * S - Salvo
	 * </pre>
	 */
	private String mode = "C";

	/**
	 * AI Difficulty:
	 *
	 * <pre>
	 *  0 - Sandbox   (Easy)
	 *  1 - Realistic (Medium)
	 *  2 - Brutal    (Hard)
	 * </pre>
	 */
	private int AIDiff = 0;

	/**
	 * <pre>
	 * index = 0 + :
	 *
	 * Mode:
	 *      0 - Classic
	 *      3 - Salvo
	 *
	 * AIDiff:
	 *      0 - Sandbox<br>
	 *      1 - Regular<br>
	 *      2 - Brutal
	 * </pre>
	 */
	private int index = 0;

	/**
	 * <pre>
	 * statsList 1st Dimensional Array:
	 * I-----------I----------------------I
	 * I Index No. I     Stats Stored     I
	 * I-----------I----------------------I
	 * I     0     I Classic - Sandbox    I
	 * I     1     I Classic - Regular    I
	 * I     2     I Classic - Brutal     I
	 * I     3     I Salvo   - Sandbox    I
	 * I     4     I Salvo   - Regular    I
	 * I     5     I Salvo   - Brutal     I
	 * I-----------I----------------------I
	 *
	 * statsList 2nd Dimensional Arrays:
	 * I-----------I----------------------I
	 * I Index No. I     Value Stored     I
	 * I-----------I----------------------I
	 * I     0     I Games Played  (GP)   I
	 * I     1     I Games Won     (GW)   I
	 * I     2     I Games Lost    (GL)   I
	 * I     3     I Shots Fired   (SF)   I
	 * I     4     I Hits landed   (Hits) I
	 * I     5     I Times Hit     (TH)   I
	 * I     6     I Ships Sunk    (SS)   I
	 * I     7     I Ships Lost    (SL)   I
	 * I-----------I----------------------I
	 *
	 * Index value = 0 + x, where x +=
	 *     Mode:
	 *          0 - Classic
	 *          3 - Salvo
	 *     AIDiff:
	 *          0 - Sandbox
	 *          1 - Regular
	 *          2 - Brutal
	 * </pre>
	 */
	private int[][] statsLists;

	/**
	 * <pre>
	 * Acc 1st Dimensional Array:
	 * I-----------I----------------------I
	 * I Index No. I     Stats Stored     I
	 * I-----------I----------------------I
	 * I     0     I Classic - Sandbox    I
	 * I     1     I Classic - Regular    I
	 * I     2     I Classic - Brutal     I
	 * I     3     I Salvo   - Sandbox    I
	 * I     4     I Salvo   - Regular    I
	 * I     5     I Salvo   - Brutal     I
	 * I-----------I----------------------I
	 *
	 * Mode:
	 *      0 - Classic
	 *      3 - Salvo
	 *
	 * AIDiff:
	 *      0 - Sandbox<br>
	 *      1 - Regular<br>
	 *      2 - Brutal
	 * </pre>
	 */
	private float[] acc;

	/**
	 * Creates new form Statistics
	 */
	ViewStats() {
		this.initComponents();

		this.UserTF.setText(CurrentUser.getCurrentUser());
		this.userStatsSetter();
		if (CurrentUser.getCurrentUser().equals("guest")) {
			this.ResetB.setEnabled(false);
		}

		this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    ModeBG = new ButtonGroup();
    DifficultyBG = new ButtonGroup();
    ConfirmP = new JPanel();
    ConfirmL = new JLabel();
    ConfirmPF = new JPasswordField();
    jLabel1 = new JLabel();
    TitleP = new JPanel();
    TitleL = new JLabel();
    CurrentUserL = new JLabel();
    UserTF = new JTextField();
    ModeL = new JLabel();
    ModeP = new JPanel();
    ClassRB = new JRadioButton();
    SalvoRB = new JRadioButton();
    DifficultyL = new JLabel();
    DifficultyP = new JPanel();
    EasyRB = new JRadioButton();
    MediumRB = new JRadioButton();
    HardRB = new JRadioButton();
    GoBackB = new JButton();
    ResetB = new JButton();
    StatsP = new JPanel();
    GPL = new JLabel();
    GPTF = new JTextField();
    GWL = new JLabel();
    GWTF = new JTextField();
    GLL = new JLabel();
    GLTF = new JTextField();
    SFL = new JLabel();
    SFTF = new JTextField();
    HitsL = new JLabel();
    HitsTF = new JTextField();
    AccL = new JLabel();
    AccTF = new JTextField();
    THL = new JLabel();
    THTF = new JTextField();
    SSL = new JLabel();
    SSTF = new JTextField();
    SLL = new JLabel();
    SLTF = new JTextField();

    ConfirmL.setLabelFor(ConfirmPF);
    ConfirmL.setText("Please confirm your password:");

    jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
    jLabel1.setText("Are you sure you wish to reset the statistics for this category?");

    GroupLayout ConfirmPLayout = new GroupLayout(ConfirmP);
    ConfirmP.setLayout(ConfirmPLayout);
    ConfirmPLayout.setHorizontalGroup(ConfirmPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(ConfirmPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(ConfirmPLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
          .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(ConfirmPLayout.createSequentialGroup()
            .addComponent(ConfirmL)
            .addGap(218, 218, 218))
          .addComponent(ConfirmPF))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    ConfirmPLayout.setVerticalGroup(ConfirmPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, ConfirmPLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGap(18, 18, 18)
        .addComponent(ConfirmL)
        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(ConfirmPF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Statistics");
    setResizable(false);

    TitleL.setHorizontalAlignment(SwingConstants.CENTER);
    TitleL.setText("Statistics");

    CurrentUserL.setLabelFor(UserTF);
    CurrentUserL.setText("Viewing Stats of:");

    UserTF.setEditable(false);

    ModeL.setText("Game Mode:");

    ModeP.setLayout(new GridLayout(1, 2));

    ModeBG.add(ClassRB);
    ClassRB.setSelected(true);
    ClassRB.setText("Classic");
    ClassRB.setActionCommand("C");
    ClassRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ModeChanged(evt);
      }
    });
    ModeP.add(ClassRB);

    ModeBG.add(SalvoRB);
    SalvoRB.setText("Salvo");
    SalvoRB.setActionCommand("S");
    SalvoRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        ModeChanged(evt);
      }
    });
    ModeP.add(SalvoRB);

    DifficultyL.setText("AI Difficulty:");

    DifficultyP.setLayout(new GridLayout(1, 3));

    DifficultyBG.add(EasyRB);
    EasyRB.setSelected(true);
    EasyRB.setText("Sandbox");
    EasyRB.setActionCommand("S");
    EasyRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        DifficultyChanged(evt);
      }
    });
    DifficultyP.add(EasyRB);

    DifficultyBG.add(MediumRB);
    MediumRB.setText("Realistic");
    MediumRB.setActionCommand("R");
    MediumRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        DifficultyChanged(evt);
      }
    });
    DifficultyP.add(MediumRB);

    DifficultyBG.add(HardRB);
    HardRB.setText("Brutal");
    HardRB.setActionCommand("B");
    HardRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        DifficultyChanged(evt);
      }
    });
    DifficultyP.add(HardRB);

    GoBackB.setText("Go Back");
    GoBackB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        GoBack(evt);
      }
    });

    ResetB.setText("Reset Statistics");
    ResetB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Reset(evt);
      }
    });

    GroupLayout TitlePLayout = new GroupLayout(TitleP);
    TitleP.setLayout(TitlePLayout);
    TitlePLayout.setHorizontalGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(TitlePLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(TitleL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(TitlePLayout.createSequentialGroup()
            .addComponent(CurrentUserL)
            .addGap(18, 18, 18)
            .addComponent(UserTF, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
          .addGroup(GroupLayout.Alignment.TRAILING, TitlePLayout.createSequentialGroup()
            .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
              .addComponent(ModeL, GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
              .addComponent(DifficultyL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
              .addComponent(ModeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(DifficultyP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addGroup(TitlePLayout.createSequentialGroup()
            .addComponent(GoBackB)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ResetB)))
        .addContainerGap())
    );
    TitlePLayout.setVerticalGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(TitlePLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(TitleL)
        .addGap(18, 18, 18)
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(CurrentUserL)
          .addComponent(UserTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(ModeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(ModeL, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(DifficultyP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(DifficultyL, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(TitlePLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(GoBackB)
          .addComponent(ResetB))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GPL.setLabelFor(GPTF);
    GPL.setText("Games Played:");

    GPTF.setEditable(false);

    GWL.setLabelFor(SFTF);
    GWL.setText("Games Won:");

    GWTF.setEditable(false);

    GLL.setLabelFor(SFTF);
    GLL.setText("Games Lost:");

    GLTF.setEditable(false);

    SFL.setLabelFor(SFTF);
    SFL.setText("Shots Fired:");

    SFTF.setEditable(false);

    HitsL.setLabelFor(HitsTF);
    HitsL.setText("Hits:");

    HitsTF.setEditable(false);

    AccL.setLabelFor(AccTF);
    AccL.setText("Accuracy:");

    AccTF.setEditable(false);

    THL.setLabelFor(THTF);
    THL.setText("Times Hit:");

    THTF.setEditable(false);

    SSL.setLabelFor(SSTF);
    SSL.setText("Ships Sunk:");

    SSTF.setEditable(false);

    SLL.setLabelFor(SLTF);
    SLL.setText("Ships Lost:");

    SLTF.setEditable(false);

    GroupLayout StatsPLayout = new GroupLayout(StatsP);
    StatsP.setLayout(StatsPLayout);
    StatsPLayout.setHorizontalGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(StatsPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(GLL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(GWL, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(GPL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(SFL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(HitsL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(AccL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(THL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(SSL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(SLL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(GWTF, GroupLayout.Alignment.TRAILING)
          .addComponent(GPTF, GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
          .addComponent(HitsTF)
          .addComponent(AccTF)
          .addComponent(THTF)
          .addComponent(SSTF)
          .addComponent(SLTF)
          .addComponent(GLTF)
          .addComponent(SFTF))
        .addContainerGap())
    );
    StatsPLayout.setVerticalGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(StatsPLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(GPL)
          .addComponent(GPTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(GWTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(GWL))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(GLL)
          .addComponent(GLTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(SFL)
          .addComponent(SFTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(HitsL)
          .addComponent(HitsTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(AccL)
          .addComponent(AccTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(THL)
          .addComponent(THTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(SSL)
          .addComponent(SSTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(StatsPLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
          .addComponent(SLL)
          .addComponent(SLTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(StatsP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(TitleP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(TitleP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(StatsP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Gets the current user's statistics and sets the TextFields to display them.
	 */
	private void userStatsSetter() {
		this.index = (this.mode.equals("S") ? 3 : 0) + this.AIDiff;

		Stats stats = new Stats();
		this.statsLists = stats.getStatsLists();
		this.acc = stats.getAcc();

		this.GPTF.setText("" + this.statsLists[this.index][0]);
		this.GWTF.setText("" + this.statsLists[this.index][1]);
		this.GLTF.setText("" + this.statsLists[this.index][2]);
		this.SFTF.setText("" + this.statsLists[this.index][3]);
		this.HitsTF.setText("" + this.statsLists[this.index][4]);
		this.AccTF.setText("" + this.acc[this.index] + " %");
		this.THTF.setText("" + this.statsLists[this.index][5]);
		this.SSTF.setText("" + this.statsLists[this.index][6]);
		this.SLTF.setText("" + this.statsLists[this.index][7]);
	}

	/**
	 * Goes back to the main frame.
	 *
	 * @param evt Button Click
	 */
	private void GoBack(ActionEvent evt) {//GEN-FIRST:event_GoBack
		JShip JShip = new JShip(); // Creates the JShip Form object
		JShip.setVisible(true);    // Makes the JShip Form to be visible

		this.dispose();            // Destroys the current form object
	}//GEN-LAST:event_GoBack

	/**
	 * Changes the Statistics display on changing the difficulty level
	 *
	 * @param evt Button Click
	 */
	private void DifficultyChanged(ActionEvent evt) {//GEN-FIRST:event_DifficultyChanged
		String difficulty = this.DifficultyBG.getSelection().getActionCommand();
		this.AIDiff = difficulty.equals("B") ? 2 : (difficulty.equals("R") ? 1 : 0);

		this.userStatsSetter();
	}//GEN-LAST:event_DifficultyChanged

	/**
	 * Changes the Statistics display on changing the game mode level
	 *
	 * @param evt Button Click
	 */
	private void ModeChanged(ActionEvent evt) {//GEN-FIRST:event_ModeChanged
		this.mode = this.ModeBG.getSelection().getActionCommand();

		this.userStatsSetter();
	}//GEN-LAST:event_ModeChanged

	/**
	 * Resets the user's statistics for this round.
	 *
	 * @param evt button click.
	 */
  private void Reset(ActionEvent evt) {//GEN-FIRST:event_Reset
		int response = JOptionPane.showConfirmDialog(null, this.ConfirmP, "Confirm Password", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
		ChangeUserDetails change = new ChangeUserDetails();

		if (response == 0) { // Checks if the user clicked Yes
			char[] password = this.ConfirmPF.getPassword();

			if (change.checkHash(password) == ChangeUserDetails.getCurrentHash()) { // Checks if the correct current password was entered.
				int[] statsList = new int[6];
				statsList[0] = this.statsLists[this.index][0];
				for (int s = 3; s < this.statsLists[this.index].length; s++) {
					statsList[s - 2] = this.statsLists[this.index][s];
				}
				UpdateStats stats = new UpdateStats(this.mode, this.AIDiff, statsList);

				if (stats.reset() < 0) {
					JOptionPane.showMessageDialog(null, "An Error Occurred!", "ERROR", JOptionPane.ERROR_MESSAGE);
				} else {
					this.userStatsSetter();
					JOptionPane.showMessageDialog(null, "All statistics for this category were reset!", "Reset Performed", JOptionPane.INFORMATION_MESSAGE);
				}
			} else {           // Incorrect current password entered.
				JOptionPane.showMessageDialog(null, "Incorrect Password entered!", "Password Incorrect", JOptionPane.ERROR_MESSAGE);
			}
		}

		this.ConfirmPF.setText("");
  }//GEN-LAST:event_Reset

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JLabel AccL;
  private JTextField AccTF;
  private JRadioButton ClassRB;
  private JLabel ConfirmL;
  private JPanel ConfirmP;
  private JPasswordField ConfirmPF;
  private JLabel CurrentUserL;
  private ButtonGroup DifficultyBG;
  private JLabel DifficultyL;
  private JPanel DifficultyP;
  private JRadioButton EasyRB;
  private JLabel GLL;
  private JTextField GLTF;
  private JLabel GPL;
  private JTextField GPTF;
  private JLabel GWL;
  private JTextField GWTF;
  private JButton GoBackB;
  private JRadioButton HardRB;
  private JLabel HitsL;
  private JTextField HitsTF;
  private JRadioButton MediumRB;
  private ButtonGroup ModeBG;
  private JLabel ModeL;
  private JPanel ModeP;
  private JButton ResetB;
  private JLabel SFL;
  private JTextField SFTF;
  private JLabel SLL;
  private JTextField SLTF;
  private JLabel SSL;
  private JTextField SSTF;
  private JRadioButton SalvoRB;
  private JPanel StatsP;
  private JLabel THL;
  private JTextField THTF;
  private JLabel TitleL;
  private JPanel TitleP;
  private JTextField UserTF;
  private JLabel jLabel1;
  // End of variables declaration//GEN-END:variables
}
