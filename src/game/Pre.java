package game;

import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.*;
import jship.JShip;


/**
 * Form for starting the game round.
 *
 * @author blackk100
 */
public final class Pre extends JFrame {

	/**
	 * Round Initialization Variables:
	 *
	 * <pre>
	 * I-----------I-----------I-----------I
	 * I Index No. I   false   I    true   I
	 * I-----------I-----------I-----------I
	 * I     0     I  10 x 10  I  15 x 15  I
	 * I-----------I-----------------------I
	 * I     1     I       Battleship      I
	 * I     2     I        Cruiser        I
	 * I     3     I       Destroyer       I
	 * I     4     I       Corvette        I
	 * I-----------I-----------------------I
	 * </pre>
	 */
	private boolean[] initVars = {false, false, false, false, false};

	/**
	 * Game Mode:
	 * <pre>
	 * C - Classic
	 * S - Salvo
	 * </pre>
	 */
	private String mode = "C";

	/**
	 * AI Difficulty:
	 *
	 * <pre>
	 * -1 - Sandbox   (Easy)
	 *  0 - Realistic (Medium)
	 *  1 - Brutal    (Hard)
	 * </pre>
	 */
	private int AIDiff = -1;

	/**
	 * Creates a new form Pre
	 *
	 * Used when coming from the Main Screen
	 */
	public Pre() {
		initComponents();
		this.setLocationRelativeTo(null);
	}

	/**
	 * Creates a new form Pre
	 *
	 * Used when coming from DiffSelector
	 *
	 * @param initVars Initialization Variables
	 * @param type     Game Type
	 * @param mode     Game Mode
	 */
	Pre(boolean[] initVars, int type, String mode) {
		this.initComponents();

		if (initVars[0] == true) {
			this.Grid15RB.setSelected(true);
		}
		if (initVars[1] == true) {
			this.BattleshipCB.setSelected(true);
		}
		if (initVars[2] == true) {
			this.CruiserCB.setSelected(true);
		}
		if (initVars[3] == true) {
			this.DestroyerCB.setSelected(true);
		}
		if (initVars[4] == true) {
			this.CorvetteCB.setSelected(true);
		}

		if (mode.equals("C")) {
			this.ClassRB.setSelected(true);
		} else if (mode.equals("S")) {
			this.SalvoRB.setSelected(true);
		}

		this.setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    SizeBG = new ButtonGroup();
    ModeBG = new ButtonGroup();
    TypeBG = new ButtonGroup();
    DifficultyBG = new ButtonGroup();
    PreP = new JPanel();
    TitleL = new JLabel();
    GridL = new JLabel();
    GridP = new JPanel();
    Grid10RB = new JRadioButton();
    Grid15RB = new JRadioButton();
    ModeL = new JLabel();
    ModeP = new JPanel();
    ClassRB = new JRadioButton();
    SalvoRB = new JRadioButton();
    DifficultyL = new JLabel();
    DifficultyP = new JPanel();
    SRB = new JRadioButton();
    RRB = new JRadioButton();
    BRB = new JRadioButton();
    ShipsL = new JLabel();
    ShipsP = new JPanel();
    BattleshipCB = new JCheckBox();
    CruiserCB = new JCheckBox();
    DestroyerCB = new JCheckBox();
    CorvetteCB = new JCheckBox();
    ButtonsP = new JPanel();
    GoBackB = new JButton();
    PlayB = new JButton();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setTitle("Game Setup");
    setResizable(false);

    TitleL.setHorizontalAlignment(SwingConstants.CENTER);
    TitleL.setText("Game Setup");

    GridL.setLabelFor(GridL);
    GridL.setText("Grid Size:");

    GridP.setLayout(new GridLayout(1, 2));

    SizeBG.add(Grid10RB);
    Grid10RB.setSelected(true);
    Grid10RB.setText("10 x 10");
    Grid10RB.setActionCommand("10");
    Grid10RB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        SizeChanged(evt);
      }
    });
    GridP.add(Grid10RB);

    SizeBG.add(Grid15RB);
    Grid15RB.setText("15 x 15");
    Grid15RB.setActionCommand("15");
    Grid15RB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        SizeChanged(evt);
      }
    });
    GridP.add(Grid15RB);

    ModeL.setLabelFor(ModeP);
    ModeL.setText("Game Mode:");

    ModeP.setLayout(new GridLayout(1, 2));

    ModeBG.add(ClassRB);
    ClassRB.setSelected(true);
    ClassRB.setText("Classic");
    ClassRB.setActionCommand("C");
    ModeP.add(ClassRB);

    ModeBG.add(SalvoRB);
    SalvoRB.setText("Salvo");
    SalvoRB.setActionCommand("S");
    ModeP.add(SalvoRB);

    DifficultyL.setText("AI Difficulty:");

    DifficultyP.setLayout(new GridLayout(1, 3));

    DifficultyBG.add(SRB);
    SRB.setSelected(true);
    SRB.setText("Sandbox");
    SRB.setActionCommand("S");
    SRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        AIDiffChanged(evt);
      }
    });
    DifficultyP.add(SRB);

    DifficultyBG.add(RRB);
    RRB.setText("Realistic");
    RRB.setActionCommand("R");
    RRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        AIDiffChanged(evt);
      }
    });
    DifficultyP.add(RRB);

    DifficultyBG.add(BRB);
    BRB.setText("Brutal");
    BRB.setActionCommand("B");
    BRB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        AIDiffChanged(evt);
      }
    });
    DifficultyP.add(BRB);

    ShipsL.setLabelFor(ShipsP);
    ShipsL.setText("Ships Available:");

    ShipsP.setLayout(new GridLayout(2, 3));

    BattleshipCB.setText("<html>Battleships<br/>5 Tiles; x1</html>");
    ShipsP.add(BattleshipCB);

    CruiserCB.setText("<html>Cruisers<br/>4 Tiles; x3</html>");
    ShipsP.add(CruiserCB);

    DestroyerCB.setText("<html>Destroyers<br/>3 Tiles; x4</html>");
    ShipsP.add(DestroyerCB);

    CorvetteCB.setText("<html>Corvettes<br/>2 Tiles; x5</html>");
    ShipsP.add(CorvetteCB);

    ButtonsP.setLayout(new GridLayout(1, 3, 100, 0));

    GoBackB.setText("Go Back");
    GoBackB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        GoBack(evt);
      }
    });
    ButtonsP.add(GoBackB);

    PlayB.setText("Start");
    PlayB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Start(evt);
      }
    });
    ButtonsP.add(PlayB);

    GroupLayout PrePLayout = new GroupLayout(PreP);
    PreP.setLayout(PrePLayout);
    PrePLayout.setHorizontalGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(GroupLayout.Alignment.TRAILING, PrePLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
          .addComponent(ButtonsP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(TitleL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(PrePLayout.createSequentialGroup()
            .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(DifficultyL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ModeL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ShipsL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(GridL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(ModeP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(GridP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ShipsP, GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
              .addComponent(DifficultyP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap())
    );
    PrePLayout.setVerticalGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(PrePLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(TitleL)
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(GridP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(GridL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(ModeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(ModeL, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(DifficultyL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(DifficultyP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(ShipsL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(ShipsP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addComponent(ButtonsP, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(PreP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(PreP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Goes back to the Main form
	 *
	 * @param evt Button Click
	 */
	private void GoBack(ActionEvent evt) {//GEN-FIRST:event_GoBack
		JShip JShip = new JShip(); // Creates the JShip Form object
		JShip.setVisible(true);    // Makes the JShip Form to be visible

		this.dispose();            // Destroys the current form object
	}//GEN-LAST:event_GoBack

	/**
	 * Starts the Game.
	 *
	 * @param evt Button Click
	 */
	private void Start(ActionEvent evt) {//GEN-FIRST:event_Start
		this.mode = this.ModeBG.getSelection().getActionCommand();
		this.initVars[1] = this.BattleshipCB.isSelected();
		this.initVars[2] = this.CruiserCB.isSelected();
		this.initVars[3] = this.DestroyerCB.isSelected();
		this.initVars[4] = this.CorvetteCB.isSelected();
		System.out.println("Game mode and ship type selections obtained!");

		boolean flag = true;
		for (int i = 1; i < 5; i++) {
			if (this.initVars[i] == true) {
				flag = false;
			}
		}
		System.out.println("Ship type selections verified!");

		if (flag) {
			System.out.println("No Ship Type is selected! Please select a ship type!");
			JOptionPane.showMessageDialog(null, "No Ship Type is selected! Please select a ship type!", "No Ship Selected", JOptionPane.WARNING_MESSAGE);
		} else {
			Game Game = new Game(this.initVars, this.mode, this.AIDiff); // Creates the JShip Form object
			Game.setVisible(true);                                       // Makes the JShip Form to be visible

			this.dispose();                                              // Destroys the current form object
		}
	}//GEN-LAST:event_Start

	/**
	 * Sets the Grid Size variable
	 *
	 * @param evt Button Click
	 */
	private void SizeChanged(ActionEvent evt) {//GEN-FIRST:event_SizeChanged
		this.initVars[0] = Integer.parseInt(this.SizeBG.getSelection().getActionCommand()) == 15;
	}//GEN-LAST:event_SizeChanged

  private void AIDiffChanged(ActionEvent evt) {//GEN-FIRST:event_AIDiffChanged
		String diff = this.DifficultyBG.getSelection().getActionCommand();
		if (diff.equals("S")) {
			this.AIDiff = -1;
		} else if (diff.equals("R")) {
			this.AIDiff = 0;
		} else if (diff.equals("B")) {
			this.AIDiff = 1;
		}
  }//GEN-LAST:event_AIDiffChanged

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JRadioButton BRB;
  private JCheckBox BattleshipCB;
  private JPanel ButtonsP;
  private JRadioButton ClassRB;
  private JCheckBox CorvetteCB;
  private JCheckBox CruiserCB;
  private JCheckBox DestroyerCB;
  private ButtonGroup DifficultyBG;
  private JLabel DifficultyL;
  private JPanel DifficultyP;
  private JButton GoBackB;
  private JRadioButton Grid10RB;
  private JRadioButton Grid15RB;
  private JLabel GridL;
  private JPanel GridP;
  private ButtonGroup ModeBG;
  private JLabel ModeL;
  private JPanel ModeP;
  private JButton PlayB;
  private JPanel PreP;
  private JRadioButton RRB;
  private JRadioButton SRB;
  private JRadioButton SalvoRB;
  private JLabel ShipsL;
  private JPanel ShipsP;
  private ButtonGroup SizeBG;
  private JLabel TitleL;
  private ButtonGroup TypeBG;
  // End of variables declaration//GEN-END:variables
}
