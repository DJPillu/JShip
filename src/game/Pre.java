package game;

import java.awt.GridLayout;
import java.awt.event.*;
import javax.swing.*;
import jship.JShip;


/**
 * Form for starting the game round.
 *
 * @author blackk100
 */
public class Pre extends JFrame {

	/**
	 * Round Initialization Variables:
	 *
	 * <pre>
	 * I-----------I-----------I-----------I
	 * I Index No. I   false   I    true   I
	 * I-----------I-----------I-----------I
	 * I     0     I  10 x 10  I  15 x 15  I
	 * I-----------I-----------------------I
	 * I     1     I       Battleship      I
	 * I     2     I        Cruiser        I
	 * I     3     I       Destroyer       I
	 * I     4     I      Patrol Boat      I
	 * I-----------I-----------------------I
	 * </pre>
	 */
	private boolean[] initVars = {false, false, false, false, false};

	/**
	 * Game Type:
	 * <pre>
	 *  1 - PvE
	 *  0 - EvE
	 * </pre>
	 */
	private int type = 1;

	/**
	 * Game Mode:
	 * <pre>
	 * C - Classic
	 * S - Salvo
	 * </pre>
	 */
	private String mode = "C";

	/**
	 * Creates a new form Pre
	 *
	 * Used when coming from the Main Screen
	 */
	public Pre() {
		initComponents();
	}

	/**
	 * Creates a new form Pre
	 *
	 * Used when coming from DiffSelector
	 *
	 * @param initVars Initialization Variables
	 * @param type     Game Type
	 * @param mode     Game Mode
	 */
	public Pre(boolean[] initVars, int type, String mode) {
		initComponents();

		if (initVars[0] == true) {
			this.Grid15RB.setSelected(true);
		}
		if (initVars[1] == true) {
			this.BattleshipCB.setSelected(true);
		}
		if (initVars[2] == true) {
			this.CruiserCB.setSelected(true);
		}
		if (initVars[3] == true) {
			this.DestroyerCB.setSelected(true);
		}
		if (initVars[4] == true) {
			this.PatrolCB.setSelected(true);
		}

		if (type == 0) {
			this.EvERB.setSelected(true);
		} else if (type == 1) {
			this.PvERB.setSelected(true);
		}

		if (mode.equals("C")) {
			this.ClassRB.setSelected(true);
		} else if (mode.equals("S")) {
			this.SalvoRB.setSelected(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    SizeBG = new ButtonGroup();
    ModeBG = new ButtonGroup();
    TypeBG = new ButtonGroup();
    PreP = new JPanel();
    TitleL = new JLabel();
    GridL = new JLabel();
    GridP = new JPanel();
    Grid10RB = new JRadioButton();
    Grid15RB = new JRadioButton();
    ModeL = new JLabel();
    ModeP = new JPanel();
    ClassRB = new JRadioButton();
    SalvoRB = new JRadioButton();
    TypeL = new JLabel();
    TypeP = new JPanel();
    PvERB = new JRadioButton();
    EvERB = new JRadioButton();
    ShipsL = new JLabel();
    ShipsP = new JPanel();
    BattleshipCB = new JCheckBox();
    CruiserCB = new JCheckBox();
    DestroyerCB = new JCheckBox();
    PatrolCB = new JCheckBox();
    ButtonsP = new JPanel();
    GoBackB = new JButton();
    PlayB = new JButton();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setTitle("Game Setup");
    setResizable(false);

    TitleL.setHorizontalAlignment(SwingConstants.CENTER);
    TitleL.setText("Game Setup");

    GridL.setLabelFor(GridL);
    GridL.setText("Grid Size:");

    GridP.setLayout(new GridLayout(1, 2));

    SizeBG.add(Grid10RB);
    Grid10RB.setSelected(true);
    Grid10RB.setText("10 x 10");
    Grid10RB.setActionCommand("10");
    Grid10RB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        SizeChanged(evt);
      }
    });
    GridP.add(Grid10RB);

    SizeBG.add(Grid15RB);
    Grid15RB.setText("15 x 15");
    Grid15RB.setActionCommand("15");
    Grid15RB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        SizeChanged(evt);
      }
    });
    GridP.add(Grid15RB);

    ModeL.setLabelFor(ModeP);
    ModeL.setText("Game Mode:");

    ModeP.setLayout(new GridLayout(1, 2));

    ModeBG.add(ClassRB);
    ClassRB.setSelected(true);
    ClassRB.setText("Classic");
    ClassRB.setActionCommand("C");
    ModeP.add(ClassRB);

    ModeBG.add(SalvoRB);
    SalvoRB.setText("Salvo");
    SalvoRB.setActionCommand("S");
    SalvoRB.setEnabled(false);
    ModeP.add(SalvoRB);

    TypeL.setLabelFor(TypeP);
    TypeL.setText("Game Type:");

    TypeP.setLayout(new GridLayout(1, 3));

    TypeBG.add(PvERB);
    PvERB.setSelected(true);
    PvERB.setText("Player vs AI");
    PvERB.setActionCommand("PvE");
    PvERB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        TypeChanged(evt);
      }
    });
    TypeP.add(PvERB);

    TypeBG.add(EvERB);
    EvERB.setText("AI vs AI");
    EvERB.setActionCommand("EvE");
    EvERB.setEnabled(false);
    EvERB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        TypeChanged(evt);
      }
    });
    TypeP.add(EvERB);

    ShipsL.setLabelFor(ShipsP);
    ShipsL.setText("Ships Available:");

    ShipsP.setLayout(new GridLayout(2, 3));

    BattleshipCB.setText("<html>Battleship<br>1 Space; x5</html>");
    ShipsP.add(BattleshipCB);

    CruiserCB.setText("<html>Cruiser<br>1 Space; x8</html>");
    ShipsP.add(CruiserCB);

    DestroyerCB.setText("<html>Destroyer<br>1 Space; x10</html>");
    ShipsP.add(DestroyerCB);

    PatrolCB.setText("<html>Patrol Boat<br>1 Space; x15</html>");
    ShipsP.add(PatrolCB);

    ButtonsP.setLayout(new GridLayout(1, 3, 100, 0));

    GoBackB.setText("Go Back");
    GoBackB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        GoBack(evt);
      }
    });
    ButtonsP.add(GoBackB);

    PlayB.setText("Next");
    PlayB.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        Next(evt);
      }
    });
    ButtonsP.add(PlayB);

    GroupLayout PrePLayout = new GroupLayout(PreP);
    PreP.setLayout(PrePLayout);
    PrePLayout.setHorizontalGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(PrePLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addComponent(ButtonsP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(TitleL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(PrePLayout.createSequentialGroup()
            .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(ModeL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(TypeL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ShipsL, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(GridL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
              .addComponent(TypeP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ModeP, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(GridP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(ShipsP, GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE))))
        .addContainerGap())
    );
    PrePLayout.setVerticalGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(PrePLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(TitleL)
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(GridP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(GridL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(ModeP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(ModeL, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(TypeL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(TypeP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(PrePLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
          .addComponent(ShipsL, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(ShipsP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(ButtonsP, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(PreP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(PreP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

	/**
	 * Goes back to the Main form
	 *
	 * @param evt Button Click
	 */
	private void GoBack(ActionEvent evt) {//GEN-FIRST:event_GoBack
		JShip JShip = new JShip(); // Creates the JShip Form object
		JShip.setVisible(true);    // Makes the JShip Form to be visible

		this.dispose();            // Destroys the current form object
	}//GEN-LAST:event_GoBack

	/**
	 * Starts the Game.
	 *
	 * @param evt Button Click
	 */
	private void Next(ActionEvent evt) {//GEN-FIRST:event_Next
		this.mode = this.ModeBG.getSelection().getActionCommand();
		this.initVars[1] = this.BattleshipCB.isSelected();
		this.initVars[2] = this.CruiserCB.isSelected();
		this.initVars[3] = this.DestroyerCB.isSelected();
		this.initVars[4] = this.PatrolCB.isSelected();
		System.out.println("Game mode and ship type selections obtained!");

		boolean flag = true;
		for (int i = 1; i < 5; i++) {
			if (this.initVars[i] == true) {
				flag = false;
			}
		}
		System.out.println("Ship type selections verified!");

		if (flag) {
			System.out.println("No Ship Type is selected! Please select a ship type!");
			JOptionPane.showMessageDialog(null, "No Ship Type is selected! Please select a ship type!", "No Ship Selected", JOptionPane.WARNING_MESSAGE);
		} else {
			if (this.type == 0) {
				System.out.println("Statistics will not be tracked for this EvE round.");
				JOptionPane.showMessageDialog(null, "Statistics will not be tracked for this round.", "Stats not Counted", JOptionPane.INFORMATION_MESSAGE);
			} else if (this.type != 1) {
				System.out.println("An Error occurred! Please contact the developer!");
				JOptionPane.showMessageDialog(null, "An Error occurred! Please contact the developer!", "An Error occured", JOptionPane.ERROR_MESSAGE);
			}

			if (this.type == 0 || this.type == 1) {
				DiffSelector DiffSelector = new DiffSelector(this.initVars, this.type, this.mode); // Creates the DiffSelector form object
				DiffSelector.setVisible(true);                                                     // Makes the DiffSelector form to be visible

				this.dispose();                                                                    // Destroys the current form object
			}
		}

		System.out.println("Play() ended!\n");
	}//GEN-LAST:event_Next

	/**
	 * Sets the Game Type variable
	 *
	 * @param evt Button Click
	 */
	private void TypeChanged(ActionEvent evt) {//GEN-FIRST:event_TypeChanged
		String diff = this.TypeBG.getSelection().getActionCommand();
		if (diff.equals("EvE")) {
			this.type = 0;
		} else if (diff.equals("PvE")) {
			this.type = 1;
		}
	}//GEN-LAST:event_TypeChanged

	/**
	 * Sets the Grid Size variable
	 *
	 * @param evt Button Click
	 */
	private void SizeChanged(ActionEvent evt) {//GEN-FIRST:event_SizeChanged
		this.initVars[0] = Integer.parseInt(this.SizeBG.getSelection().getActionCommand()) == 15;
	}//GEN-LAST:event_SizeChanged

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox BattleshipCB;
  private JPanel ButtonsP;
  private JRadioButton ClassRB;
  private JCheckBox CruiserCB;
  private JCheckBox DestroyerCB;
  private JRadioButton EvERB;
  private JButton GoBackB;
  private JRadioButton Grid10RB;
  private JRadioButton Grid15RB;
  private JLabel GridL;
  private JPanel GridP;
  private ButtonGroup ModeBG;
  private JLabel ModeL;
  private JPanel ModeP;
  private JCheckBox PatrolCB;
  private JButton PlayB;
  private JPanel PreP;
  private JRadioButton PvERB;
  private JRadioButton SalvoRB;
  private JLabel ShipsL;
  private JPanel ShipsP;
  private ButtonGroup SizeBG;
  private JLabel TitleL;
  private ButtonGroup TypeBG;
  private JLabel TypeL;
  private JPanel TypeP;
  // End of variables declaration//GEN-END:variables
}
